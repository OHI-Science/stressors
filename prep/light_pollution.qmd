---
title: "Light pollution: current and model"
format: html
editor: visual
---

notes:

Used this ranger tutorial: https://www.css.cornell.edu/faculty/dgr2/\_static/files/R_html/CompareRandomForestPackages.html#3_Random_forest_with_ranger

and caret package to fine tune parameters:

https://anderfernandez.com/en/blog/machine-learning-r-caret/

## Light pollution future modeling

We only have historic and current light pollution data, so we will be modeling the change in light pollution based on changes in GDP, changes in population, proportion land in raster cell, and ecoregion.

Current light pollution data: https://figshare.com/articles/dataset/Harmonization_of_DMSP_and_VIIRS_nighttime_light_data_from_1992-2018_at_the_global_scale/9828827/7

https://www.nature.com/articles/s41597-020-0510-y

The dataset contains (1) temporally calibrated DMSP-OLS NTL time series data from 1992-2013; and (2) converted NTL time series from the VIIRS data (2014-2018)\
Spatial resolution: 30 arc-seconds (\~1km)\
Information about the composited images from the calibrated DMSP dataset:F10(1992-1994); F12(1995-1996); F14(1997-2003); F16(2004-2009); F18(2010-2013)\
We suggested using pixels with DN values greater than 7.

# Set up

```{r}
#set options for all chunks in code
knitr::opts_chunk$set(warning=FALSE, message=FALSE,fig.width=6, fig.height=6)
#libraries
library(maps)
library(tidyverse)
library(RColorBrewer)
library(terra)
library(here)

# color
cols = rev(colorRampPalette(brewer.pal(9, 'Spectral'))(255)) # rainbow color scheme


```

### Explore light data

Can skip this!

```{r}
# see what is in directory
files <- dir("/home/shares/ohi/stressors_2021/_raw_data/light_li_2020/v7", full=TRUE)

lights <- raster::raster(files[1]) 
lights
plot(lights)

```

# Develop model

Define years for two time points of light pollution to understand how light changes with changes to GDP and population.

```{r}

current <- "2016|2017|2018|2019|2020"

```

## Defining boundaries of analysis

Want model to only include the coastal regions. This will be anything that includes land and ocean (coastal zone), one cell into land, and 2 cells into the ocean.

```{r}

# spatial map data
ocean_raw <- terra::rast(here("_spatial/ocean_area_mol.tif"))

## coastal
pure_ocean <- ifel(ocean_raw==1, 1, NA) 
pure_land <- ifel(is.na(ocean_raw), 1, NA)
coast <- ifel(ocean_raw >0 & ocean_raw<1, 1, 0)

inner_boundary1 <- boundaries(pure_land, inner=TRUE, falseval=0)

inner_boundary1 <- ifel(is.na(inner_boundary1), 0, inner_boundary1)
plot(inner_boundary1)

outer_boundary1 <-  boundaries(pure_ocean, inner=TRUE, falseval=0)
tmp <-  ifel(outer_boundary1==0, 1, NA)
outer_boundary2 <-  boundaries(tmp, inner=TRUE, falseval=0)

coastal <- app(c(coast, inner_boundary1, outer_boundary1, outer_boundary2), fun="sum", na.rm=TRUE)
coastal <- ifel(coastal==0, NA, coastal)

## boundary mask: to get rid of border cells
boundary_mask <- rast(nrow=2160, ncol=4320, xmin=-180, xmax=180, ymin=-90, ymax=90)
values(boundary_mask) <- 1
boundary_mask_mol <- terra::project(boundary_mask, "+proj=moll", res=10000)

boundary_mask_mol_extended <- extend(boundary_mask_mol, coastal)
ext(boundary_mask_mol_extended) <- ext(coastal)

plot(boundary_mask_mol_extended)

# make circle a bit smaller

tmp <- boundaries(boundary_mask_mol_extended, inner=TRUE, falseval=0)
boundary_mask_mol_extended_trim <- boundary_mask_mol_extended - tmp
boundary_mask_mol_extended_trim <- ifel(boundary_mask_mol_extended_trim==0, NA, boundary_mask_mol_extended_trim)

tmp <- boundaries(boundary_mask_mol_extended_trim, inner=TRUE, falseval=0)
boundary_mask_mol_extended_trim2 <- boundary_mask_mol_extended_trim - tmp
boundary_mask_mol_extended_trim2 <- ifel(boundary_mask_mol_extended_trim2==0, NA, boundary_mask_mol_extended_trim2)

tmp <- boundaries(boundary_mask_mol_extended_trim2, inner=TRUE, falseval=0)
boundary_mask_mol_extended_trim3 <- boundary_mask_mol_extended_trim2 - tmp
boundary_mask_mol_extended_trim3 <- ifel(boundary_mask_mol_extended_trim3==0, NA, boundary_mask_mol_extended_trim3)


coastal <- boundary_mask_mol_extended_trim3*coastal

coastal <- ifel(coastal==0, NA, coastal)
plot(coastal)

```

## Get averaged light data

```{r}

current_raster_lights <- function(years_to_include=current, name="current"){
files <- dir("/home/shares/ohi/stressors_2021/_raw_data/light_li_2020/v7", full=TRUE)
files <- grep(paste0(years_to_include, "_simVIIRS"), files, value=TRUE)

current_light <- app(terra::rast(files), fun="mean", na.rm=TRUE)

# project raster
#plot(current_light)
current_light_mol <- project(current_light, ocean_raw, method="average")
#plot(current_light_mol)

#current_light
#current_light_mol

writeRaster(current_light_mol, sprintf("/home/shares/ohi/stressors_2021/_dataprep/light/model/light_%s.tif", name), overwrite=TRUE)
}
  
  current_raster_lights(years_to_include=current, name="current")


```

## Check to see model coverage

Determine how much ocean light there is outside the boundary we have established. If there is a substantial amount, we should account for this as well.

Accounting for 86% of ocean light. There is some region on China's coast that is not accounted for. This also helps eliminate the northern and southern lights.

```{r}

# reverse our current mask
plot(coastal)
plot(pure_land)

land_coastal <- app(c(pure_land, coastal), "sum", na.rm=TRUE)
deep_ocean <- ifel(is.na(land_coastal), 1, NA)


# lights
light <- rast("/home/shares/ohi/stressors_2021/_dataprep/light/model/light_current.tif")

light <- ifel(light>7, light, 0)

# coastal light
light_coastal <- light*coastal
# deeper light
light_deep_ocean <- light * deep_ocean

global(light_coastal, "sum", na.rm=TRUE)/(global(light_deep_ocean, "sum", na.rm=TRUE) + global(light_coastal, "sum", na.rm=TRUE))

plot(log(light_deep_ocean+1))
```

## Model coastal lights

Here we use a random forest model to predict light pollution based on GDP and population, as well as variables such as proportion land in cell, ecoregion, distance to coast.

missRanger package is used for imputation of missing data.

https://cran.r-project.org/web/packages/missRanger/vignettes/missRanger.html#:\~:text=It%20can%20deal%20with%20most,destroying%20the%20original%20data%20structure.

```{r}

light <- rast("/home/shares/ohi/stressors_2021/_dataprep/light/model/light_current.tif") * coastal

gdp <-rast("/home/shares/ohi/stressors_2021/_dataprep/gdp/gdp-per-km2-extended_current_2016_2020.tif") * coastal

pop <-rast("/home/shares/ohi/stressors_2021/_dataprep/population/other_pop_files/extend_human-pop-density-km2_current_SSP1_RCP2_6.tif") * coastal

land <- ifel(is.na(ocean_raw), 0, ocean_raw)
land <- 1-(land*coastal)

regions_sf <- sf::st_read(here("_spatial/meow_rgns/meow_rgns.shp")) %>%
  mutate(RLM_CODE = as.numeric(RLM_CODE)) %>%
  sf::st_transform(crs = "+proj=moll")

regions <- fasterize::fasterize(regions_sf, raster::raster(land), field="RLM_CODE") 

regions <- rast(regions) * coastal


distance_to_coast <- distance(pure_land) * coastal

stack <- c(light, gdp, pop, land, regions, distance_to_coast)

mod1_df <- as.data.frame(stack) 

names(mod1_df) <- c("light", "gdp", "pop", "prop_land", "region", "distance_to_coast")

mod1_df <- mod1_df %>%
  mutate(region = as.factor(region),
         region = as.factor(ifelse(is.na(region), "other", region)))

library(caret)
library(ranger)
library(missRanger)

# gapfill missing data
mod1_df_impute <- missRanger(
  mod1_df, 
  pmm.k = 3, 
  splitrule = "extratrees", 
  num.trees = 50
)


## This takes a very long time! But it provides optimization values

#rf_grid <- expand.grid(mtry = c(2, 3, 4, 5), splitrule = c("variance", "extratrees"), min.node.size = c(1, 3, 5))
#rf_grid
#rf <- train(light ~ gdp + pop + prop_land + region + distance_to_coast, data=mod1_df_impute, method="ranger", tuneGrid = rf_grid)

# RMSE was used to select the optimal model using the smallest value.
#The final values used for the model were mtry = 5, splitrule = variance and min.node.size = 1.

# optimized parameters used in the random forest model from the ranger package
rf2 <- ranger(light ~ gdp + pop + prop_land + region + distance_to_coast , data=mod1_df_impute, mtry=5, min.node.size=1, splitrule="variance", importance="permutation")
rf2

# out of bag cross validation
mod1_df_impute$pred_light <- rf2$predictions 

plot(mod1_df_impute$light, mod1_df_impute$pred_light)
abline(0,1, col="red")

mod_fit <- lm(mod1_df_impute$light ~ mod1_df_impute$pred_light, data=mod1_df_impute)
summary(mod_fit)

importance(rf2)

```

## 

## capping the data

The original light data is from 0-63. However, they say to ignore values \<7. If we do that, this the fit of the data. Doesn't make a huge difference and we aren't generally overshooting the max, so I will not do this until later (if we do it at all).

```{r}
mod1_df_impute <- mod1_df_impute %>%
  mutate(pred_light_cap = ifelse(pred_light >63, 63, pred_light))

plot(mod1_df_impute$light, mod1_df_impute$pred_light_cap)
abline(0,1, col="red")

mod_fit <- lm(mod1_df_impute$light ~ mod1_df_impute$pred_light_cap, data=mod1_df_impute)
summary(mod_fit)


```

# Apply model to new data!

```{r}

scenarios <- data.frame(
  pop = c("SSP1", "SSP2", "SSP3", "SSP4_RCP3_4", "SSP5"),
  gdp = c("ssp1", "ssp2", "ssp3", "ssp4", "ssp5"))

period = c("near-term", "medium-term", "long-term")

model_predict_list <- expand_grid(scenarios, period)


for(i in 1:dim(model_predict_list)[1]){
  # i=1

  gdp <- rast(sprintf("/home/shares/ohi/stressors_2021/_dataprep/gdp/gdp-per-km2-extended_%s_%s.tif", model_predict_list$gdp[i], model_predict_list$period[i])) * coastal


pop_list <- list.files("/home/shares/ohi/stressors_2021/_dataprep/population/other_pop_files", pattern=model_predict_list$pop[i], full=TRUE)
pop_name <- grep(model_predict_list$period[i], pop_list, value=TRUE)
pop <- rast(pop_name) * coastal

land <- ifel(is.na(ocean_raw), 0, ocean_raw)
land <- 1-(land*coastal)

regions_sf <- sf::st_read(here("_spatial/meow_rgns/meow_rgns.shp")) %>%
  mutate(RLM_CODE = as.numeric(RLM_CODE)) %>%
  sf::st_transform(crs = "+proj=moll")

regions <- fasterize::fasterize(regions_sf, raster::raster(land), field="RLM_CODE") 

regions <- rast(regions) * coastal


distance_to_coast <- distance(pure_land) * coastal

stack <- c(gdp, pop, land, regions, distance_to_coast)

mod1_df <- as.data.frame(stack, xy=TRUE) 

names(mod1_df) <- c("x", "y", "gdp", "pop", "prop_land", "region", "distance_to_coast")

mod1_df <- mod1_df %>%
  mutate(region = as.factor(region),
         region = as.factor(ifelse(is.na(region), "other", region))) 

# gapfill missing data
mod1_df_impute <- missRanger(
  mod1_df, 
  pmm.k = 3, 
  splitrule = "extratrees", 
  num.trees = 50
)

predictions <- predict(rf2, data=mod1_df_impute)

mod1_df_impute <- mod1_df_impute %>%
  mutate(pred_light = predictions$predictions) %>%
  select(x, y, pred_light)

x2 <- rast(mod1_df_impute, type="xyz")

writeRaster(x2, sprintf("/home/shares/ohi/stressors_2021/_dataprep/light/light_%s_%s.tif", model_predict_list$gdp[i], model_predict_list$period[i]), overwrite=TRUE)

}
```

Have to do the loop for current years a bit differently. The GDP data has current without scenarios, whereas the population data has current for various model scenarios. Interestingly, the scenario current population data does not match very well for actual current population (the global numbers are very similar, but the distribution is noticeably different). The GDP data does match up very well.

```{r}
# to versions of population SSP4, choosing only one.
scenarios <- data.frame(
  pop = c("SSP1", "SSP2", "SSP3", "SSP4_RCP3_4", "SSP5"),
  gdp = c("ssp1", "ssp2", "ssp3", "ssp4", "ssp5"))

period = c("near-term", "medium-term", "long-term")

model_predict_list <- expand_grid(scenarios, period)


for(i in 1:dim(model_predict_list)[1]){
  # i=1

  gdp <- rast(sprintf("/home/shares/ohi/stressors_2021/_dataprep/gdp/gdp-per-km2-extended_%s_%s.tif", model_predict_list$gdp[i], model_predict_list$period[i])) * coastal


pop_list <- list.files("/home/shares/ohi/stressors_2021/_dataprep/population/other_pop_files", pattern=model_predict_list$pop[i], full=TRUE)
pop_name <- grep(model_predict_list$period[i], pop_list, value=TRUE)
pop <- rast(pop_name) * coastal

land <- ifel(is.na(ocean_raw), 0, ocean_raw)
land <- 1-(land*coastal)

regions_sf <- sf::st_read(here("_spatial/meow_rgns/meow_rgns.shp")) %>%
  mutate(RLM_CODE = as.numeric(RLM_CODE)) %>%
  sf::st_transform(crs = "+proj=moll")

regions <- fasterize::fasterize(regions_sf, raster::raster(land), field="RLM_CODE") 

regions <- rast(regions) * coastal


distance_to_coast <- distance(pure_land) * coastal

stack <- c(gdp, pop, land, regions, distance_to_coast)

mod1_df <- as.data.frame(stack, xy=TRUE) 

names(mod1_df) <- c("x", "y", "gdp", "pop", "prop_land", "region", "distance_to_coast")

mod1_df <- mod1_df %>%
  mutate(region = as.factor(region),
         region = as.factor(ifelse(is.na(region), "other", region))) 

# gapfill missing data
mod1_df_impute <- missRanger(
  mod1_df, 
  pmm.k = 3, 
  splitrule = "extratrees", 
  num.trees = 50
)

predictions <- predict(rf2, data=mod1_df_impute)

mod1_df_impute <- mod1_df_impute %>%
  mutate(pred_light = predictions$predictions) %>%
  select(x, y, pred_light)

x2 <- rast(mod1_df_impute, type="xyz")

writeRaster(x2, sprintf("/home/shares/ohi/stressors_2021/_dataprep/light/light_%s_%s.tif", model_predict_list$gdp[i], model_predict_list$period[i]), overwrite=TRUE)

}
```

Have to run a separate loop for current because current gdp doesn't have multiple ssps. This means we have to do things slightly differently.

```{r}

scenarios <- data.frame(
  pop = c("SSP1", "SSP2", "SSP3", "SSP4_RCP3_4", "SSP5"))

period = c("current")

model_predict_list <- expand_grid(scenarios, period)


for(i in 1:dim(model_predict_list)[1]){
  # i=1

  gdp <- rast("/home/shares/ohi/stressors_2021/_dataprep/gdp/gdp-per-km2-extended_current.tif") * coastal


pop_list <- list.files("/home/shares/ohi/stressors_2021/_dataprep/population/other_pop_files", pattern=model_predict_list$pop[i], full=TRUE)
pop_name <- grep(model_predict_list$period[i], pop_list, value=TRUE)
pop <- rast(pop_name) * coastal

land <- ifel(is.na(ocean_raw), 0, ocean_raw)
land <- 1-(land*coastal)

regions_sf <- sf::st_read(here("_spatial/meow_rgns/meow_rgns.shp")) %>%
  mutate(RLM_CODE = as.numeric(RLM_CODE)) %>%
  sf::st_transform(crs = "+proj=moll")

regions <- fasterize::fasterize(regions_sf, raster::raster(land), field="RLM_CODE") 

regions <- rast(regions) * coastal


distance_to_coast <- distance(pure_land) * coastal

stack <- c(gdp, pop, land, regions, distance_to_coast)

mod1_df <- as.data.frame(stack, xy=TRUE) 

names(mod1_df) <- c("x", "y", "gdp", "pop", "prop_land", "region", "distance_to_coast")

mod1_df <- mod1_df %>%
  mutate(region = as.factor(region),
         region = as.factor(ifelse(is.na(region), "other", region))) 

# gapfill missing data
mod1_df_impute <- missRanger(
  mod1_df, 
  pmm.k = 3, 
  splitrule = "extratrees", 
  num.trees = 50
)

predictions <- predict(rf2, data=mod1_df_impute)

mod1_df_impute <- mod1_df_impute %>%
  mutate(pred_light = predictions$predictions) %>%
  select(x, y, pred_light)

x2 <- rast(mod1_df_impute, type="xyz")

writeRaster(x2, sprintf("/home/shares/ohi/stressors_2021/_dataprep/light/raw/light_%s_%s.tif", tolower(model_predict_list$pop[i]), model_predict_list$period[i]), overwrite=TRUE)

}
```

## Rescaling data

We are rescaling based on this information from this paper: https://online.ucpress.edu/elementa/article/9/1/00049/119144/A-global-atlas-of-artificial-light-at-night-under

At a depth of 1 m, 1.9 million km2 of the world's coastal seas are exposed to biologically important ALAN, which equates to around 3.1% of the global exclusive economic zones. This area decreases to 1.6 million km2 (2.7%) at a depth of 10 m, and to 840,000 km2 (1.4%) at 20 m.

In our data, light of around \>12 units corresponds to 1.6 million km2. Given this we will use this value as the baseline scaling unit.

```{r}

# exploring data
tmp <- rast("/home/shares/ohi/stressors_2021/_dataprep/light/raw/light_ssp1_current.tif")

# total area we are looking at here
tmp_all <- ifel(!is.na(tmp), 1, NA)
global(tmp_all, "sum", na.rm=TRUE)*100

# max values
global(tmp, "max", na.rm=TRUE)

tmp_12 <- ifel(tmp>12, 1, NA)
global(tmp_12, "sum", na.rm=TRUE)*100

raster_list <- list.files("/home/shares/ohi/stressors_2021/_dataprep/light/raw/", full=TRUE) 

for(raster_file in raster_list){ # raster_file = raster_list[[1]]
  saveName <- basename(raster_file)
  saveName <- gsub("light_", "light_rescaled_", saveName)

  raster_data <- rast(raster_file)
  raster_data <- ifel(raster_data < 12, 12, raster_data)
  raster_data <- ifel(raster_data > 63, 63, raster_data)
  
  rescaled_raster_data <- (raster_data-12)/(63-12)
  crs(rescaled_raster_data) <- crs(ocean_raw)
  rescaled_raster_data <- project(rescaled_raster_data, ocean_raw)
   
    writeRaster(rescaled_raster_data, sprintf("/home/shares/ohi/stressors_2021/_dataprep/light/rescale/%s", saveName), overwrite=TRUE)
}


```
